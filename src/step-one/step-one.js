// Generated by CoffeeScript 1.10.0

/* 
StepOne of Sample Workflow
 Requirements:
 	Form with the Follow information:
	    Company Info
			Name, Address, City, State, Postal Code
		Contact Info
			Last Name
			First Name
			Email Address
			Phone number
		Total Budget
User Enters Information, Submits form to server, Moves to StepTwo
 */
var Budget, CompanyForm, ContactForm, CurrencyInput, ErrorAlert, Input, React, ReactDOM, StepOne, Submit, TotalBudgetErrorAlert, a, div, form, getValues, h3, input, label, p, ref;

React = require('react');

ReactDOM = require('react-dom');

ref = React.DOM, div = ref.div, h3 = ref.h3, p = ref.p, form = ref.form, input = ref.input, label = ref.label, a = ref.a;

Input = require('../global/input.js');

CurrencyInput = require('../global/currency-input.js');

getValues = require('../functions/form-values.js');

Submit = require('../functions/submit.js').StepOne;

ErrorAlert = React.createClass({
  render: function() {
    return div({
      className: 'alert alert-danger text-input-alert',
      role: 'alert'
    }, p({
      className: 'text-input-alert-text'
    }, "Please enter a " + this.props.text));
  }
});

TotalBudgetErrorAlert = React.createClass({
  render: function() {
    return div({
      className: 'alert alert-danger total-budget-input-alert',
      role: 'alert'
    }, p({
      className: 'text-input-alert-text'
    }, "Please enter a " + this.props.text));
  }
});

Budget = React.createClass({
  render: function() {
    return div({
      className: 'container'
    }, React.createElement(CurrencyInput, {
      name: 'total-budget',
      label: "Total Budget"
    }), this.props.error === 'total-budget' ? React.createElement(TotalBudgetErrorAlert, {
      text: 'Total Budget'
    }) : void 0);
  }
});

ContactForm = React.createClass({
  render: function() {
    return div({
      className: 'col-sm-6'
    }, form, div({
      className: 'form-group'
    }, React.createElement(Input, {
      id: 'contact-firstname',
      text: 'First Name'
    }), this.props.error === 'contact-firstname' ? React.createElement(ErrorAlert, {
      text: 'First Name'
    }) : void 0, React.createElement(Input, {
      id: 'contact-lastname',
      text: 'Last Name'
    }), this.props.error === 'contact-lastname' ? React.createElement(ErrorAlert, {
      text: 'Last Name'
    }) : void 0, React.createElement(Input, {
      id: 'contact-email',
      text: 'Email'
    }), this.props.error === 'contact-email' ? React.createElement(ErrorAlert, {
      text: 'Email'
    }) : void 0, React.createElement(Input, {
      id: 'contact-phone',
      text: 'Phone Number'
    }), this.props.error === 'contact-phone' ? React.createElement(ErrorAlert, {
      text: 'Phone'
    }) : void 0));
  }
});

CompanyForm = React.createClass({
  render: function() {
    return div({
      className: 'col-sm-6'
    }, form, div({
      className: 'form-group'
    }, React.createElement(Input, {
      id: 'company-name',
      text: 'Company Name'
    }), this.props.error === 'company-name' ? React.createElement(ErrorAlert, {
      text: 'Company Name'
    }) : void 0, React.createElement(Input, {
      id: 'company-address',
      text: 'Company Address'
    }), this.props.error === 'company-address' ? React.createElement(ErrorAlert, {
      text: 'Company Address'
    }) : void 0, React.createElement(Input, {
      id: 'company-city',
      text: 'Company City'
    }), this.props.error === 'company-city' ? React.createElement(ErrorAlert, {
      text: 'Company City'
    }) : void 0, React.createElement(Input, {
      id: 'company-state',
      text: 'Company State'
    }), this.props.error === 'company-state' ? React.createElement(ErrorAlert, {
      text: 'Company State'
    }) : void 0, React.createElement(Input, {
      id: 'company-zip',
      text: 'Company Postal Code'
    }), this.props.error === 'company-zip' ? React.createElement(ErrorAlert, {
      text: 'Company Postal Code'
    }) : void 0));
  }
});

StepOne = React.createClass({
  getInitialState: function() {
    return {
      error_key: false
    };
  },
  handleSubmit: function() {
    var _this, keys;
    keys = ['total-budget', 'company-name', 'company-address', 'company-city', 'company-state', 'company-zip', 'contact-firstname', 'contact-lastname', 'contact-email', 'contact-phone'];
    _this = this;
    return getValues(keys).then((function(resp) {
      return Submit(resp).then(function(rsp) {
        _this.props.updateData(rsp, 1);
        return _this.props.changeStep(2);
      });
    }), function(err) {
      console.log('error');
      return _this.setState({
        error_key: err
      });
    });
  },
  handleBack: function() {
    return this.props.changeStep(0);
  },
  render: function() {
    return div({
      className: 'container',
      id: 'step-one-container'
    }, div({
      className: 'row'
    }, div({
      className: 'col-sm-2'
    }, a({
      className: 'btn btn-primary',
      onClick: this.handleBack
    }, 'Back')), div({
      className: 'col-sm-8'
    }, h3({}, "Contact Information"), p({}, "Please enter your company and contact information below. You will also need to enter the budget for your campaign.")), div({
      className: 'col-sm-2'
    })), React.createElement(Budget, {
      error: this.state.error_key
    }), div({
      className: 'row'
    }, React.createElement(CompanyForm, {
      error: this.state.error_key
    }), React.createElement(ContactForm, {
      error: this.state.error_key
    })), div({
      className: 'container'
    }, a({
      className: 'btn btn-primary',
      onClick: this.handleSubmit
    }, 'Submit and Go to Step Two')));
  }
});

module.exports = StepOne;
