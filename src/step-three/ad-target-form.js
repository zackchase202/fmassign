// Generated by CoffeeScript 1.10.0
var $, AdTargetComponent, AdTargetForm, AdTargetInputs, CurrencyInput, ErrorAlert, Input, React, ReactDOM, a, div, form, h3, img, input, label, p, ref;

React = require('react');

ReactDOM = require('react-dom');

$ = require('jquery');

ref = React.DOM, div = ref.div, h3 = ref.h3, p = ref.p, form = ref.form, input = ref.input, label = ref.label, a = ref.a, img = ref.img;

Input = require('../global/input.js');

CurrencyInput = require('../global/currency-input.js');

ErrorAlert = React.createClass({
  render: function() {
    return div({
      className: 'alert alert-danger step-three-input-alert',
      role: 'alert'
    }, p({
      className: 'step-three-input-alert-text'
    }, "Please enter a " + this.props.text));
  }
});

AdTargetInputs = React.createClass({
  render: function() {
    return div({
      className: 'ad-target-input-container'
    }, div({
      className: 'container'
    }, React.createElement(CurrencyInput, {
      name: 'cpm' + this.props.count,
      label: 'Cost Per Impression'
    }), this.props.error === 'cpm' + this.props.count ? React.createElement(ErrorAlert, {
      text: 'CPM'
    }) : void 0, div({
      className: 'impression-input-container'
    }, React.createElement(Input, {
      id: 'max-impressions' + this.props.count,
      text: 'Max Impressions'
    }), this.props.error === 'maximpressions' + this.props.count ? React.createElement(ErrorAlert, {
      text: 'Maximum Amount of Impressions'
    }) : void 0)));
  }
});

AdTargetComponent = React.createClass({
  render: function() {
    console.log(this.props);
    return div({
      className: 'row ad-target-component'
    }, div({
      className: 'col-sm-2'
    }, img({
      className: 'target-ad-image',
      src: this.props.image
    })), div({
      className: 'col-sm-10'
    }, React.createElement(AdTargetInputs, {
      count: this.props.count,
      error: this.props.error
    })));
  }
});

AdTargetForm = React.createClass({
  getInitialState: function() {
    return {
      image_amount: 5,
      error: false
    };
  },
  handleSubmit: function() {
    var formValues, i, targetValues, target_form_keys;
    target_form_keys = ['cpm', 'max-impressions'];
    formValues = {};
    i = 1;
    while (i <= this.state.image_amount) {
      targetValues = {};
      targetValues['cpm' + String(i)] = $('#cpm' + String(i)).val();
      targetValues['maximpressions' + String(i)] = $('#max-impressions' + String(i)).val();
      if (targetValues['cpm' + String(i)] === '') {
        this.setState({
          error: 'cpm' + String(i)
        });
        return;
      }
      if (targetValues['maximpressions' + String(i)] === '') {
        this.setState({
          error: 'maximpressions' + String(i)
        });
        return;
      }
      formValues['image' + String(i)] = targetValues;
      i++;
    }
    console.log('handling submit');
    return this.props.changeStep(4, formValues);
  },
  render: function() {
    console.log(this.props.data.images.length);
    return div({
      className: 'container'
    }, (function() {
      switch (this.props.data.image_amount) {
        case 1:
          return div({
            className: 'empty'
          }, React.createElement(AdTargetComponent, {
            error: this.state.error,
            count: 1,
            image: this.props.data.images[0]
          }));
        case 2:
          return div({
            className: 'empty'
          }, React.createElement(AdTargetComponent, {
            error: this.state.error,
            count: 1,
            image: this.props.data.images[0]
          }), React.createElement(AdTargetComponent, {
            error: this.state.error,
            count: 2,
            image: this.props.data.images[1]
          }));
        case 3:
          return div({
            className: 'empty'
          }, React.createElement(AdTargetComponent, {
            error: this.state.error,
            count: 1,
            image: this.props.data.images[0]
          }), React.createElement(AdTargetComponent, {
            error: this.state.error,
            count: 2,
            image: this.props.data.images[1]
          }), React.createElement(AdTargetComponent, {
            error: this.state.error,
            count: 3,
            image: this.props.data.images[2]
          }));
        case 4:
          return div({
            className: 'empty'
          }, React.createElement(AdTargetComponent, {
            error: this.state.error,
            count: 1,
            image: this.props.data.images[0]
          }), React.createElement(AdTargetComponent, {
            error: this.state.error,
            count: 2,
            image: this.props.data.images[1]
          }), React.createElement(AdTargetComponent, {
            error: this.state.error,
            count: 3,
            image: this.props.data.images[2]
          }), React.createElement(AdTargetComponent, {
            error: this.state.error,
            count: 4,
            image: this.props.data.images[3]
          }));
        case 5:
          return div({
            className: 'empty'
          }, React.createElement(AdTargetComponent, {
            error: this.state.error,
            count: 1,
            image: this.props.data.images[0]
          }), React.createElement(AdTargetComponent, {
            error: this.state.error,
            count: 2,
            image: this.props.data.images[1]
          }), React.createElement(AdTargetComponent, {
            error: this.state.error,
            count: 3,
            image: this.props.data.images[2]
          }), React.createElement(AdTargetComponent, {
            error: this.state.error,
            count: 4,
            image: this.props.data.images[3]
          }), React.createElement(AdTargetComponent, {
            error: this.state.error,
            count: 5,
            image: this.props.data.images[4]
          }));
      }
    }).call(this), a({
      className: 'btn btn-primary',
      onClick: this.handleSubmit
    }, 'Submit Ad Targeting'));
  }
});

module.exports = AdTargetForm;
